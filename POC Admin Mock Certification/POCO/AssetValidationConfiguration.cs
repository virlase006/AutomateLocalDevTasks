// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Mock.Implementation;
//
//    var validation = Validation.FromJson(jsonString);

namespace Mock.Implementation
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AssetValidationConfiguration
    {
        [JsonProperty("propertyValidations")]
        public List<Validation> PropertyValidations { get; set; }
    }

    public partial class Validation
    {
        [JsonProperty("member_group")]
        public string MemberGroup { get; set; }

        [JsonProperty("property")]
        public string PropertyName { get; set; }

        [JsonProperty("value")]
        public MemberConfig Config { get; set; }

        [JsonProperty("isRelation")]
        public bool IsRelation { get; set; }

        [JsonProperty("associated_definition", NullValueHandling = NullValueHandling.Ignore)]
        public string AssociatedDefinition { get; set; }
    }

    public partial class MemberConfig
    {
        [JsonProperty("required")]
        public bool Required { get; set; }

        [JsonProperty("conditional")]
        public bool Conditional { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("editable")]
        public bool Editable { get; set; }

        [JsonProperty("bulk_editable")]
        public bool BulkEditable { get; set; }

        [JsonProperty("bulk_edit_in_table")]
        public bool BulkEditInTable { get; set; }

        [JsonProperty("facet_enabled")]
        public bool FacetEnabled { get; set; }

        [JsonProperty("facet_config", NullValueHandling = NullValueHandling.Ignore)]
        public FacetConfig FacetConfig { get; set; }

        [JsonProperty("fullText_searchable")]
        public bool FullTextSearchable { get; set; }

        [JsonProperty("show_in_advanced_search")]
        public bool ShowInAdvancedSearch { get; set; }

        [JsonProperty("autocomplete")]
        public bool Autocomplete { get; set; }

        [JsonProperty("show_in_tableview")]
        public bool ShowInTableview { get; set; }

        [JsonProperty("show_in_listview")]
        public bool ShowInListview { get; set; }

        [JsonProperty("show_in_flyoutview")]
        public bool ShowOnFlyout { get; set; }

        [JsonProperty("panel_detail_page")]
        public string PanelDetailPage { get; set; }
    }

    public partial class FacetConfig
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("position")]
        public string Position { get; set; }

        [JsonProperty("definition", NullValueHandling = NullValueHandling.Ignore)]
        public string Definition { get; set; }

        [JsonProperty("hasLimit")]
        public bool HasLimit { get; set; }

        [JsonProperty("sorting")]
        public string Sorting { get; set; }

        [JsonProperty("direction")]
        public string Direction { get; set; }

        [JsonProperty("apply_grouping")]
        public bool ApplyGrouping { get; set; }

        [JsonProperty("multi_select", NullValueHandling = NullValueHandling.Ignore)]
        public bool MultiSelect { get; set; }
    }

    public partial class AssetValidationConfiguration
    {
        public static AssetValidationConfiguration FromJson(string json) => JsonConvert.DeserializeObject<AssetValidationConfiguration>(json, Mock.Implementation.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AssetValidationConfiguration self) => JsonConvert.SerializeObject(self, Mock.Implementation.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }
}
