// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Mock.Implementation;
//
//    var assetSearchComponent = AssetSearchComponent.FromJson(jsonString);

namespace Mock.Implementation.Alternative
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AssetSearchComponent
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("identifier", NullValueHandling = NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [JsonProperty("cultures", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Cultures { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AssetSearchComponentProperties Properties { get; set; }

        [JsonProperty("relations", NullValueHandling = NullValueHandling.Ignore)]
        public Relations Relations { get; set; }

        [JsonProperty("created_by", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations CreatedBy { get; set; }

        [JsonProperty("created_on", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedOn { get; set; }

        [JsonProperty("modified_by", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations ModifiedBy { get; set; }

        [JsonProperty("modified_on", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ModifiedOn { get; set; }

        [JsonProperty("entitydefinition", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Entitydefinition { get; set; }

        [JsonProperty("copy", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Copy { get; set; }

        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Permissions { get; set; }

        [JsonProperty("lifecycle", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Lifecycle { get; set; }

        [JsonProperty("saved_selections", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations SavedSelections { get; set; }

        [JsonProperty("roles", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Roles { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Annotations { get; set; }

        [JsonProperty("is_root_taxonomy_item", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRootTaxonomyItem { get; set; }

        [JsonProperty("is_path_root", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPathRoot { get; set; }

        [JsonProperty("inherits_security", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InheritsSecurity { get; set; }

        [JsonProperty("is_system_owned", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSystemOwned { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public long? Version { get; set; }

        [JsonProperty("modules", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Modules { get; set; }

        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public Self Self { get; set; }

        [JsonProperty("renditions", NullValueHandling = NullValueHandling.Ignore)]
        public Renditions Renditions { get; set; }
    }

    public partial class Annotations
    {
        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Href { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    public partial class AssetSearchComponentProperties
    {
        [JsonProperty("PageComponent.Name", NullValueHandling = NullValueHandling.Ignore)]
        public string PageComponentName { get; set; }

        [JsonProperty("PageComponent.Title", NullValueHandling = NullValueHandling.Ignore)]
        public PageComponentTitle PageComponentTitle { get; set; }

        [JsonProperty("PageComponent.IsTitleVisible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PageComponentIsTitleVisible { get; set; }

        [JsonProperty("PageComponent.IsVisible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PageComponentIsVisible { get; set; }

        [JsonProperty("PageComponent.IsNested")]
        public object PageComponentIsNested { get; set; }

        [JsonProperty("PageComponent.TileData")]
        public object PageComponentTileData { get; set; }

        [JsonProperty("PageComponent.Data", NullValueHandling = NullValueHandling.Ignore)]
        public Renditions PageComponentData { get; set; }

        [JsonProperty("PageComponent.Settings", NullValueHandling = NullValueHandling.Ignore)]
        public PageComponentSettings PageComponentSettings { get; set; }

        [JsonProperty("PageComponent.Contexts", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> PageComponentContexts { get; set; }

        [JsonProperty("PageComponent.UIVisibility")]
        public object PageComponentUiVisibility { get; set; }

        [JsonProperty("PageComponent.Zone")]
        public object PageComponentZone { get; set; }

        [JsonProperty("PageComponent.Visualization")]
        public object PageComponentVisualization { get; set; }

        [JsonProperty("PageComponent.NonSystemOwnedRestrictions")]
        public object PageComponentNonSystemOwnedRestrictions { get; set; }
    }

    public partial class Renditions
    {
    }

    public partial class PageComponentSettings
    {
        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public List<PageComponentSettingsFilter> Filters { get; set; }

        [JsonProperty("facets", NullValueHandling = NullValueHandling.Ignore)]
        public List<Facet> Facets { get; set; }

        [JsonProperty("followUps", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> FollowUps { get; set; }

        [JsonProperty("querybuilder", NullValueHandling = NullValueHandling.Ignore)]
        public List<Querybuilder> Querybuilder { get; set; }

        [JsonProperty("customFacets", NullValueHandling = NullValueHandling.Ignore)]
        public List<CustomFacet> CustomFacets { get; set; }

        [JsonProperty("sorting", NullValueHandling = NullValueHandling.Ignore)]
        public List<Sorting> Sorting { get; set; }

        [JsonProperty("views", NullValueHandling = NullValueHandling.Ignore)]
        public List<View> Views { get; set; }

        [JsonProperty("general", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, bool> General { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public Selection Selection { get; set; }

        [JsonProperty("customFacetsDisplayPosition", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomFacetsDisplayPosition { get; set; }

        [JsonProperty("paging", NullValueHandling = NullValueHandling.Ignore)]
        public Paging Paging { get; set; }
    }

    public partial class CustomFacet
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("json", NullValueHandling = NullValueHandling.Ignore)]
        public Json Json { get; set; }
    }

    public partial class Json
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("inhibitors", NullValueHandling = NullValueHandling.Ignore)]
        public Inhibitors Inhibitors { get; set; }

        [JsonProperty("controls", NullValueHandling = NullValueHandling.Ignore)]
        public List<Control> Controls { get; set; }
    }

    public partial class Control
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("collapsed", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Collapsed { get; set; }
    }

    public partial class Inhibitors
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("requiredPermission", NullValueHandling = NullValueHandling.Ignore)]
        public string RequiredPermission { get; set; }
    }

    public partial class Facet
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public string Position { get; set; }

        [JsonProperty("sorting", NullValueHandling = NullValueHandling.Ignore)]
        public string Sorting { get; set; }

        [JsonProperty("direction", NullValueHandling = NullValueHandling.Ignore)]
        public string Direction { get; set; }
    }

    public partial class PageComponentSettingsFilter
    {
        [JsonProperty("operator", NullValueHandling = NullValueHandling.Ignore)]
        public string Operator { get; set; }

        [JsonProperty("filters", NullValueHandling = NullValueHandling.Ignore)]
        public List<FilterFilter> Filters { get; set; }
    }

    public partial class FilterFilter
    {
        [JsonProperty("definition", NullValueHandling = NullValueHandling.Ignore)]
        public string Definition { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public string Field { get; set; }

        [JsonProperty("operator", NullValueHandling = NullValueHandling.Ignore)]
        public string Operator { get; set; }

        [JsonProperty("ids", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Ids { get; set; }
    }

    public partial class Paging
    {
        [JsonProperty("pageSizes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> PageSizes { get; set; }

        [JsonProperty("maxPages", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxPages { get; set; }
    }

    public partial class Querybuilder
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("subtype", NullValueHandling = NullValueHandling.Ignore)]
        public string Subtype { get; set; }

        [JsonProperty("definition", NullValueHandling = NullValueHandling.Ignore)]
        public string Definition { get; set; }
    }

    public partial class Selection
    {
        [JsonProperty("selectionPool", NullValueHandling = NullValueHandling.Ignore)]
        public string SelectionPool { get; set; }

        [JsonProperty("entitySpecificPool", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EntitySpecificPool { get; set; }

        [JsonProperty("fixedPoolIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FixedPoolIdentifier { get; set; }
    }

    public partial class Sorting
    {
        [JsonProperty("property", NullValueHandling = NullValueHandling.Ignore)]
        public string Property { get; set; }

        [JsonProperty("definition", NullValueHandling = NullValueHandling.Ignore)]
        public string Definition { get; set; }

        [JsonProperty("defaultDescending", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultDescending { get; set; }

        [JsonProperty("canAscend", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanAscend { get; set; }

        [JsonProperty("canDescend", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanDescend { get; set; }
    }

    public partial class View
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("selectable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Selectable { get; set; }

        [JsonProperty("supportsMultipleDefinitions", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SupportsMultipleDefinitions { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("builder", NullValueHandling = NullValueHandling.Ignore)]
        public string Builder { get; set; }

        [JsonProperty("definitions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Definition> Definitions { get; set; }
    }

    public partial class Definition
    {
        [JsonProperty("definition", NullValueHandling = NullValueHandling.Ignore)]
        public string DefinitionDefinition { get; set; }

        [JsonProperty("definitionLabels", NullValueHandling = NullValueHandling.Ignore)]
        public PageComponentTitle DefinitionLabels { get; set; }

        [JsonProperty("template", NullValueHandling = NullValueHandling.Ignore)]
        public string Template { get; set; }

        [JsonProperty("rendition", NullValueHandling = NullValueHandling.Ignore)]
        public Rendition? Rendition { get; set; }

        [JsonProperty("showDefinitionName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDefinitionName { get; set; }

        [JsonProperty("builder", NullValueHandling = NullValueHandling.Ignore)]
        public string Builder { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public List<Field> Fields { get; set; }

        [JsonProperty("actions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Action> Actions { get; set; }

        [JsonProperty("indicators", NullValueHandling = NullValueHandling.Ignore)]
        public List<Indicator> Indicators { get; set; }

        [JsonProperty("templateOperation", NullValueHandling = NullValueHandling.Ignore)]
        public TemplateOperation TemplateOperation { get; set; }

        [JsonProperty("enableQuickEdit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableQuickEdit { get; set; }

        [JsonProperty("detailsComponent")]
        public object DetailsComponent { get; set; }

        [JsonProperty("moreActionsSettings", NullValueHandling = NullValueHandling.Ignore)]
        public MoreActionsSettings MoreActionsSettings { get; set; }
    }

    public partial class Action
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        [JsonProperty("renditions", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Renditions { get; set; }

        [JsonProperty("permissionsToLoad", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> PermissionsToLoad { get; set; }

        [JsonProperty("display", NullValueHandling = NullValueHandling.Ignore)]
        public Display? Display { get; set; }

        [JsonProperty("buttonStyle", NullValueHandling = NullValueHandling.Ignore)]
        public string ButtonStyle { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("customLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomLabel { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredElement> ActionRequired { get; set; }

        [JsonProperty("optional", NullValueHandling = NullValueHandling.Ignore)]
        public List<ActionOptional> Optional { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("messages", NullValueHandling = NullValueHandling.Ignore)]
        public ActionMessages Messages { get; set; }

        [JsonProperty("requestDownload", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequestDownload { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Fields { get; set; }
    }

    public partial class RequiredElement
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }
    }

    public partial class ActionMessages
    {
        [JsonProperty("Preview", NullValueHandling = NullValueHandling.Ignore)]
        public string Preview { get; set; }

        [JsonProperty("Addtosavedselection", NullValueHandling = NullValueHandling.Ignore)]
        public string Addtosavedselection { get; set; }

        [JsonProperty("Removefromsavedselection", NullValueHandling = NullValueHandling.Ignore)]
        public string Removefromsavedselection { get; set; }

        [JsonProperty("Inlinepreview", NullValueHandling = NullValueHandling.Ignore)]
        public string Inlinepreview { get; set; }
    }

    public partial class ActionOptional
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public ValueUnion? Value { get; set; }
    }

    public partial class ValueElement
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Permission> Permissions { get; set; }
    }

    public partial class Permission
    {
        [JsonProperty("identifier", NullValueHandling = NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    }

    public partial class PageComponentTitle
    {
        [JsonProperty("en-US", NullValueHandling = NullValueHandling.Ignore)]
        public string EnUs { get; set; }
    }

    public partial class Field
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("control", NullValueHandling = NullValueHandling.Ignore)]
        public string Control { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        [JsonProperty("showHelpText", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowHelpText { get; set; }

        [JsonProperty("helpTextFormat", NullValueHandling = NullValueHandling.Ignore)]
        public string HelpTextFormat { get; set; }
    }

    public partial class Indicator
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Fields { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("display", NullValueHandling = NullValueHandling.Ignore)]
        public Display? Display { get; set; }

        [JsonProperty("backgroundColor", NullValueHandling = NullValueHandling.Ignore)]
        public string BackgroundColor { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> IndicatorRequired { get; set; }

        [JsonProperty("optional", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Optional { get; set; }

        [JsonProperty("messages", NullValueHandling = NullValueHandling.Ignore)]
        public IndicatorMessages Messages { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class IndicatorMessages
    {
        [JsonProperty("Draft", NullValueHandling = NullValueHandling.Ignore)]
        public string Draft { get; set; }

        [JsonProperty("Lock", NullValueHandling = NullValueHandling.Ignore)]
        public string Lock { get; set; }

        [JsonProperty("Hasduplicate", NullValueHandling = NullValueHandling.Ignore)]
        public string Hasduplicate { get; set; }

        [JsonProperty("Processing", NullValueHandling = NullValueHandling.Ignore)]
        public string Processing { get; set; }
    }

    public partial class MoreActionsSettings
    {
        [JsonProperty("moreOptionsDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public string MoreOptionsDisplay { get; set; }

        [JsonProperty("moreOptionsButtonStyle", NullValueHandling = NullValueHandling.Ignore)]
        public string MoreOptionsButtonStyle { get; set; }
    }

    public partial class TemplateOperation
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        [JsonProperty("permissionsToLoad", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> PermissionsToLoad { get; set; }

        [JsonProperty("display", NullValueHandling = NullValueHandling.Ignore)]
        public Display? Display { get; set; }

        [JsonProperty("buttonStyle", NullValueHandling = NullValueHandling.Ignore)]
        public string ButtonStyle { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("customLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomLabel { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredElement> TemplateOperationRequired { get; set; }

        [JsonProperty("optional", NullValueHandling = NullValueHandling.Ignore)]
        public List<TemplateOperationOptional> Optional { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("messages", NullValueHandling = NullValueHandling.Ignore)]
        public TemplateOperationMessages Messages { get; set; }
    }

    public partial class TemplateOperationMessages
    {
        [JsonProperty("Viewdetailpage", NullValueHandling = NullValueHandling.Ignore)]
        public string Viewdetailpage { get; set; }
    }

    public partial class TemplateOperationOptional
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Value { get; set; }
    }

    public partial class Relations
    {
        [JsonProperty("PageToPageComponent", NullValueHandling = NullValueHandling.Ignore)]
        public Self PageToPageComponent { get; set; }

        [JsonProperty("ZoneToPageComponent", NullValueHandling = NullValueHandling.Ignore)]
        public Self ZoneToPageComponent { get; set; }

        [JsonProperty("ComponentToPageComponent", NullValueHandling = NullValueHandling.Ignore)]
        public ComponentToPageComponent ComponentToPageComponent { get; set; }

        [JsonProperty("TemplateToPageComponent", NullValueHandling = NullValueHandling.Ignore)]
        public Self TemplateToPageComponent { get; set; }

        [JsonProperty("PageComponentToDuplicateSelf", NullValueHandling = NullValueHandling.Ignore)]
        public Self PageComponentToDuplicateSelf { get; set; }
    }

    public partial class ComponentToPageComponent
    {
        [JsonProperty("parent", NullValueHandling = NullValueHandling.Ignore)]
        public Parent Parent { get; set; }

        [JsonProperty("inherits_security", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InheritsSecurity { get; set; }

        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public Self Self { get; set; }
    }

    public partial class Parent
    {
        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ParentProperties Properties { get; set; }

        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Href { get; set; }
    }

    public partial class ParentProperties
    {
        [JsonProperty("Component.Type", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentType { get; set; }

        [JsonProperty("Component.Name", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentName { get; set; }
    }

    public partial class Self
    {
        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Href { get; set; }
    }

    public enum Display { Icon, Label };

    public partial struct ValueUnion
    {
        public bool? Bool;
        public List<ValueElement> ValueElementArray;

        public static implicit operator ValueUnion(bool Bool) => new ValueUnion { Bool = Bool };
        public static implicit operator ValueUnion(List<ValueElement> ValueElementArray) => new ValueUnion { ValueElementArray = ValueElementArray };
    }

    public partial struct Rendition
    {
        public string String;
        public List<string> StringArray;

        public static implicit operator Rendition(string String) => new Rendition { String = String };
        public static implicit operator Rendition(List<string> StringArray) => new Rendition { StringArray = StringArray };
    }

    public partial class AssetSearchComponent
    {
        public static AssetSearchComponent FromJson(string json) => JsonConvert.DeserializeObject<AssetSearchComponent>(json, Mock.Implementation.Alternative.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AssetSearchComponent self) => JsonConvert.SerializeObject(self, Mock.Implementation.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DisplayConverter.Singleton,
                ValueUnionConverter.Singleton,
                RenditionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(List<long>);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (List<long>)untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DisplayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Display) || t == typeof(Display?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "icon":
                    return Display.Icon;
                case "label":
                    return Display.Label;
            }
            throw new Exception("Cannot unmarshal type Display");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Display)untypedValue;
            switch (value)
            {
                case Display.Icon:
                    serializer.Serialize(writer, "icon");
                    return;
                case Display.Label:
                    serializer.Serialize(writer, "label");
                    return;
            }
            throw new Exception("Cannot marshal type Display");
        }

        public static readonly DisplayConverter Singleton = new DisplayConverter();
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new ValueUnion { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<ValueElement>>(reader);
                    return new ValueUnion { ValueElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.ValueElementArray != null)
            {
                serializer.Serialize(writer, value.ValueElementArray);
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }

    internal class RenditionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rendition) || t == typeof(Rendition?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Rendition { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new Rendition { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Rendition");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Rendition)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type Rendition");
        }

        public static readonly RenditionConverter Singleton = new RenditionConverter();
    }
}
